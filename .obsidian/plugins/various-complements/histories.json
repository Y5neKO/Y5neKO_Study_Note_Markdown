{"用gcc转成汇编语言，64位：":{"用gcc转成汇编语言，64位：":{"currentFile":{"count":2,"lastUpdated":1711523171147}}},"exam.c":{"exam.c":{"currentFile":{"count":1,"lastUpdated":1711523290990}}},"example":{"example":{"currentFile":{"count":1,"lastUpdated":1711523296661}}},"前七个为通用寄存器，EBP又叫做基址指针寄存器，该指针永远指向系统栈最上面一个栈帧的底部。所以ebp指向的是栈的栈底的数据。，ESP寄存器用于保存当前Stack的地址。":{"前七个为通用寄存器，EBP又叫做基址指针寄存器，该指针永远指向系统栈最上面一个栈帧的底部。所以ebp指向的是栈的栈底的数据。，ESP寄存器用于保存当前Stack的地址。":{"currentFile":{"count":1,"lastUpdated":1711530127766}}},"EBP又叫做基址指针寄存器，该指针永远指向系统栈最上面一个栈帧的底部。所以ebp指向的是栈的栈底的数据。，ESP寄存器用于保存当前Stack的地址。":{"EBP又叫做基址指针寄存器，该指针永远指向系统栈最上面一个栈帧的底部。所以ebp指向的是栈的栈底的数据。，ESP寄存器用于保存当前Stack的地址。":{"currentFile":{"count":2,"lastUpdated":1711530149407}}},"指令结束之后，回到了main函数执行call指令的下一条指令，ye":{"指令结束之后，回到了main函数执行call指令的下一条指令，ye":{"currentFile":{"count":1,"lastUpdated":1711531654287}}},"MMU把虚拟地址映射为物理内存地址":{"MMU把虚拟地址映射为物理内存地址":{"currentFile":{"count":1,"lastUpdated":1711596797352}}},"节头部，程序文件每节的摘要信息。":{"节头部，程序文件每节的摘要信息。":{"currentFile":{"count":1,"lastUpdated":1711608765003}}},"专用头部，程序内存分布信息，还有运行时加载器所需的其他信息，包括由ldd等工具生成的库列表。":{"专用头部，程序内存分布信息，还有运行时加载器所需的其他信息，包括由ldd等工具生成的库列表。":{"currentFile":{"count":1,"lastUpdated":1711608786722}}},"调试信息，提取出程序文件中的任何调试信息。符号信息，以类似nm的方式转储符号表信息。":{"调试信息，提取出程序文件中的任何调试信息。符号信息，以类似nm的方式转储符号表信息。":{"currentFile":{"count":1,"lastUpdated":1711608790982}}},"调试信息，提取出程序文件中的任何调试信息。":{"调试信息，提取出程序文件中的任何调试信息。":{"currentFile":{"count":1,"lastUpdated":1711608799622}}},"符号信息，以类似nm的方式转储符号表信息。":{"符号信息，以类似nm的方式转储符号表信息。":{"currentFile":{"count":1,"lastUpdated":1711608803176}}},"strings不会指出字符串在文件中的位置。使用命令行参数-t可令strings显示所发现的每一个字符串的文件偏移量信息。":{"strings不会指出字符串在文件中的位置。使用命令行参数-t可令strings显示所发现的每一个字符串的文件偏移量信息。":{"currentFile":{"count":1,"lastUpdated":1711609159725}}},"的布局。在分析阶段，IDA会查询它的函数类型签名扩展库，设法将函数的参数类型与程序使用的内存匹配起来。如图5-9所示的结构体窗口表明":{"的布局。在分析阶段，IDA会查询它的函数类型签名扩展库，设法将函数的参数类型与程序使用的内存匹配起来。如图5-9所示的结构体窗口表明":{"currentFile":{"count":1,"lastUpdated":1711678140214}}},"与实施分段内存体系结构的CPU中的内存段混淆。该窗口中显示的信息包括段名称、起始和结束地址以及许可标志。起始和结束地址代表程序段在运行时对应的虚拟地址范围。下面是IDA在分析一个":{"与实施分段内存体系结构的CPU中的内存段混淆。该窗口中显示的信息包括段名称、起始和结束地址以及许可标志。起始和结束地址代表程序段在运行时对应的虚拟地址范围。下面是IDA在分析一个":{"currentFile":{"count":1,"lastUpdated":1711678506526}}},"栈帧示例布局":{"栈帧示例布局":{"currentFile":{"count":1,"lastUpdated":1711680223167}}},"分别反编译分析一下，首先是未使用EBP：":{"分别反编译分析一下，首先是未使用EBP：":{"currentFile":{"count":1,"lastUpdated":1711706936365}}},"IDA":{"IDA":{"internalLink":{"count":1,"lastUpdated":1711709188754}}},"通过for循环就可以遍历数组。因为数组的每个元素都可以通过索引来访问，因此，使用标准的for循环可以完成一个数组的遍历：":{"通过for循环就可以遍历数组。因为数组的每个元素都可以通过索引来访问，因此，使用标准的for循环可以完成一个数组的遍历：":{"currentFile":{"count":1,"lastUpdated":1712456503980}}},"方法参数列表":{"方法参数列表":{"currentFile":{"count":3,"lastUpdated":1712457382286}}},"我们先观察一个基本类型参数的传递：":{"我们先观察一个基本类型参数的传递：":{"currentFile":{"count":1,"lastUpdated":1712458448235}}},"方法的。例如：":{"方法的。例如：":{"currentFile":{"count":1,"lastUpdated":1712480500071}}}}